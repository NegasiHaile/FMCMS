{"version":3,"sources":["Components/Employee/EmployeesList.js"],"names":["EmployeeList","state","useContext","GlobalState","user","UserAPI","User","token","allUsers","UsersAPI","users","useState","employees","setEmployees","branchs","branchAPI","callback","setCallback","useEffect","userRole","filter","filteredEmployee","branch","deleteEmloyee","_id","fName","mName","a","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","axios","delete","headers","Authorization","res","data","msg","error","alert","response","className","to","size","variant","color","name","items","fields","tableFilter","itemsPerPageSelect","itemsPerPage","hover","footer","cleaner","sorter","pagination","scopedSlots","employee","brnc","map","filteredBranch","branchName","Actions","pathname","content","onClick"],"mappings":"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","file":"static/js/15.63dc0f5b.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport { GlobalState } from \"../../GlobalState\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CLabel,\r\n  CDataTable,\r\n  CLink,\r\n  CTooltip,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\n\r\nconst EmployeeList = () => {\r\n  const state = useContext(GlobalState);\r\n  const [user] = state.UserAPI.User;\r\n  const [token] = state.token;\r\n  const [allUsers] = state.UsersAPI.users;\r\n  const [employees, setEmployees] = useState(allUsers);\r\n\r\n  const [branchs] = state.branchAPI.branchs;\r\n  const [callback, setCallback] = state.UsersAPI.callback;\r\n\r\n  useEffect(() => {\r\n    if (user.userRole === \"branch-admin\") {\r\n      setEmployees(\r\n        allUsers.filter(\r\n          (filteredEmployee) => filteredEmployee.branch == user.branch\r\n        )\r\n      );\r\n    } else {\r\n      setEmployees(allUsers);\r\n    }\r\n  }, [user, allUsers]);\r\n\r\n  const deleteEmloyee = async (_id, fName, mName) => {\r\n    // e.preventDefault();\r\n    try {\r\n      Swal.fire({\r\n        title: \"Are you sure\",\r\n        text:\r\n          \"You want to delelte \" +\r\n          fName +\r\n          \" \" +\r\n          mName +\r\n          \"'s detail permanently?!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#1E263C\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\",\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          const res = await axios.delete(`/user/delete/${_id}`, {\r\n            headers: { Authorization: token },\r\n          });\r\n          Swal.fire(\"Deleted!\", res.data.msg, \"success\");\r\n          setCallback(!callback);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      alert(error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  // const filterEmployeeBranch = async (_id) => {\r\n  //     branchs.filter((branch) => branch._id == _id)\r\n  //       .map((filteredBranch) => <li>{filteredBranch.branchName}</li>);\r\n  // }\r\n\r\n  //  to={{ pathname: `/cards/${id}`, state: id }} // sending data to another page\r\n  //             className={`card-wrapper restore-${id}`}\r\n\r\n  const employeeTableFields = [\r\n    \"fName\",\r\n    \"mName\",\r\n    \"lName\",\r\n    \"gender\",\r\n    \"email\",\r\n    \"phoneNumber\",\r\n    \"branch\",\r\n    \"userRole\",\r\n    \"status\",\r\n    \"Actions\",\r\n  ];\r\n  return (\r\n    <>\r\n      <CCard className=\" shadow-sm\">\r\n        {user.userRole === \"super-admin\" && (\r\n          <CCardHeader className=\"d-flex justify-content-between\">\r\n            <CLabel>List of employees</CLabel>\r\n            <CButton\r\n              to=\"/Employee/register\"\r\n              size=\"sm\"\r\n              variant=\"outline\"\r\n              color=\"dark\"\r\n            >\r\n              <CIcon name=\"cil-plus\" /> Add Employee\r\n            </CButton>\r\n          </CCardHeader>\r\n        )}\r\n        <CCardBody>\r\n          <CDataTable\r\n            items={employees.filter(\r\n              (user) =>\r\n                user.userRole === \"branch-admin\" ||\r\n                user.userRole === \"technician\" ||\r\n                user.userRole === \"sales\"\r\n            )}\r\n            fields={employeeTableFields}\r\n            tableFilter\r\n            // columnFilter\r\n            itemsPerPageSelect\r\n            itemsPerPage={10}\r\n            hover\r\n            footer\r\n            cleaner\r\n            sorter\r\n            pagination\r\n            scopedSlots={{\r\n              branch: (employee) => (\r\n                <td>\r\n                  {branchs\r\n                    .filter((brnc) => brnc._id === employee.branch)\r\n                    .map((filteredBranch) => filteredBranch.branchName)}\r\n                </td>\r\n              ),\r\n              Actions: (employee) => (\r\n                <td className=\"d-flex justify-content-between\">\r\n                  {user.userRole === \"super-admin\" && (\r\n                    <>\r\n                      <CLink\r\n                        className=\"text-success\"\r\n                        to={{\r\n                          pathname: `/Employee/Edit/${employee._id}`,\r\n                          state: employee,\r\n                        }}\r\n                      >\r\n                        <CTooltip\r\n                          content={`Edit the  - ${employee.fName} ${employee.mName}- employee detail.`}\r\n                        >\r\n                          <CIcon name=\"cil-pencil\" />\r\n                        </CTooltip>\r\n                      </CLink>\r\n\r\n                      <span className=\"text-muted\">|</span>\r\n\r\n                      <CLink\r\n                        className=\"text-danger\"\r\n                        onClick={() =>\r\n                          deleteEmloyee(\r\n                            employee._id,\r\n                            employee.fName,\r\n                            employee.mName\r\n                          )\r\n                        }\r\n                      >\r\n                        <CTooltip\r\n                          content={`Delete - ${employee.fName} ${employee.mName}- employee.`}\r\n                        >\r\n                          <CIcon name=\"cil-trash\" />\r\n                        </CTooltip>\r\n                      </CLink>\r\n\r\n                      <span className=\"text-muted\">|</span>\r\n                    </>\r\n                  )}\r\n\r\n                  <CLink\r\n                    className=\"text-primary\"\r\n                    to={`/user/profile/${employee._id}`}\r\n                  >\r\n                    <CTooltip\r\n                      content={`See detail of - ${employee.fName} ${employee.mName}- employee.`}\r\n                    >\r\n                      <CIcon name=\"cil-fullscreen\" />\r\n                    </CTooltip>\r\n                  </CLink>\r\n                </td>\r\n              ),\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"],"sourceRoot":""}