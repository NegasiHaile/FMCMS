{"version":3,"sources":["Components/Machine/MachinesList.js"],"names":["MachinesList","state","useContext","GlobalState","user","UserAPI","User","token","allMachines","MachineAPI","machines","useState","setMachines","callback","setCallback","BusinessAPI","callbackBusiness","setCallbackBusiness","SalesAPI","callbackSales","setCallbackSales","activemachine","setActivemachine","showModal","setShowModal","distributingMachineId","setDistributingMachineId","showMachineDistributeModal","setShowMachineDistributeModal","businesses","machineDetail","serialNumber","machineModel","brand","price","branch","problemStatus","businessId","machine","setMachine","useEffect","userRole","filter","filteredMachine","onChangeInput","e","target","name","value","sweetAlert","type","text","Swal","fire","position","background","icon","confirmButtonColor","showConfirmButton","onSubmitRegisterMachine","a","preventDefault","axios","post","res","data","msg","response","editmachineDetail","put","headers","Authorization","deletemachine","_id","title","showCancelButton","cancelButtonColor","confirmButtonText","then","result","isConfirmed","delete","error","distributeMachine","machineId","revertMachine","id","className","size","color","onClick","items","fields","key","label","sorter","tableFilter","columnFilter","itemsPerPageSelect","itemsPerPage","hover","cleaner","pagination","scopedSlots","salesStatus","content","Actions","show","onClose","closeButton","onSubmit","xs","md","placeholder","onChange","required","bussiness","credentials","map","filteredBussiness","businessName"],"mappings":"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","file":"static/js/7.7161be15.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { GlobalState } from \"../../GlobalState\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CLabel,\r\n  CForm,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n  CDataTable,\r\n  CLink,\r\n  CTooltip,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst MachinesList = () => {\r\n  const state = useContext(GlobalState);\r\n  const [user] = state.UserAPI.User;\r\n  const [token] = state.token;\r\n  const [allMachines] = state.MachineAPI.machines;\r\n  const [machines, setMachines] = useState(allMachines);\r\n  const [callback, setCallback] = state.MachineAPI.callback;\r\n  const [callbackBusiness, setCallbackBusiness] = state.BusinessAPI.callback;\r\n  const [callbackSales, setCallbackSales] = state.SalesAPI.callback;\r\n  const [activemachine, setActivemachine] = useState(\"none\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [distributingMachineId, setDistributingMachineId] = useState(\"none\");\r\n  const [showMachineDistributeModal, setShowMachineDistributeModal] =\r\n    useState(false);\r\n  const [businesses] = state.BusinessAPI.businesses;\r\n\r\n  const machineDetail = {\r\n    serialNumber: \"\",\r\n    machineModel: \"\",\r\n    brand: \"\",\r\n    price: \"\",\r\n    branch: user.branch,\r\n    problemStatus: \"\",\r\n    // for distributing\r\n    businessId: \"\",\r\n  };\r\n\r\n  const [machine, setMachine] = useState(machineDetail);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      user.userRole === \"branch-admin\" ||\r\n      user.userRole === \"technician\" ||\r\n      user.userRole === \"sales\"\r\n    ) {\r\n      setMachines(\r\n        allMachines.filter(\r\n          (filteredMachine) => filteredMachine.branch == user.branch\r\n        )\r\n      );\r\n    } else {\r\n      setMachines(allMachines);\r\n    }\r\n  }, [user, allMachines]);\r\n\r\n  const onChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    setMachine({ ...machine, [name]: value });\r\n  };\r\n\r\n  const sweetAlert = (type, text) => {\r\n    Swal.fire({\r\n      position: \"center\",\r\n      background: \"#EBEDEF\", // 2EB85C success // E55353 danger // 1E263C sidebar\r\n      icon: type,\r\n      text: text,\r\n      confirmButtonColor: \"#3C4B64\",\r\n      showConfirmButton: true,\r\n      // timer: 1500,\r\n    });\r\n  };\r\n\r\n  const onSubmitRegisterMachine = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await axios.post(\"/machine/register\", { ...machine });\r\n      sweetAlert(\"success\", res.data.msg);\r\n      setShowModal(!showModal);\r\n      setCallback(!callback);\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  const editmachineDetail = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await axios.put(\r\n        `/machine/edit/${activemachine}`,\r\n        { ...machine },\r\n        {\r\n          headers: { Authorization: token },\r\n        }\r\n      );\r\n      sweetAlert(\"success\", res.data.msg);\r\n      setShowModal(!showModal);\r\n      setCallback(!callback);\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  const deletemachine = async (_id, serialNumber) => {\r\n    // e.preventDefault();\r\n    try {\r\n      Swal.fire({\r\n        title: \"Delete?\",\r\n        text: \"You won't be able to revert this!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3C4B64\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\",\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          const res = await axios.delete(`/machine/delete/${_id}`, {\r\n            headers: { Authorization: token },\r\n          });\r\n          Swal.fire(\"Deleted!\", res.data.msg, \"success\");\r\n          setCallback(!callback);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  const distributeMachine = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await axios.post(\"/machine/distribute\", {\r\n        ...machine,\r\n        machineId: distributingMachineId,\r\n      });\r\n      sweetAlert(\"success\", res.data.msg);\r\n      setShowMachineDistributeModal(!showMachineDistributeModal);\r\n      setCallback(!callback);\r\n      setCallbackBusiness(!callbackBusiness);\r\n      setCallbackSales(!callbackSales);\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  const revertMachine = async (id) => {\r\n    try {\r\n      Swal.fire({\r\n        title: \"Undistribute Machine?\",\r\n        text: \"You are about to undstribute machine from a busines!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3C4B64\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, Undistribute it!\",\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          const res = await axios.put(`/machine/undistribute/${id}`, {\r\n            headers: { Authorization: token },\r\n          });\r\n          Swal.fire(\"Undistributed!\", res.data.msg, \"success\");\r\n\r\n          setCallback(!callback);\r\n          setCallbackBusiness(!callbackBusiness);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n\r\n  const machineTablefields = [\r\n    \"serialNumber\",\r\n    \"machineModel\",\r\n    \"brand\",\r\n    \"price\",\r\n    \"salesStatus\",\r\n    \"problemStatus\",\r\n    {\r\n      key: \"Actions\",\r\n      label: \"Actions\",\r\n      // _style: { width: \"1%\" },\r\n      sorter: false,\r\n      filter: false,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\" shadow-sm\">\r\n        <CCardHeader className=\"d-flex justify-content-between\">\r\n          <CLabel>Jupiter all machine list</CLabel>\r\n          {user.userRole === \"branch-admin\" && (\r\n            <CButton\r\n              size=\"sm\"\r\n              color=\"dark\"\r\n              onClick={() => {\r\n                setActivemachine(\"none\");\r\n                setMachine({ machine, ...machineDetail });\r\n                setShowModal(!showModal);\r\n              }}\r\n            >\r\n              <CIcon name=\"cil-plus\" /> Add Machine\r\n            </CButton>\r\n          )}\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CDataTable\r\n            items={machines}\r\n            fields={machineTablefields}\r\n            tableFilter\r\n            columnFilter\r\n            itemsPerPageSelect\r\n            itemsPerPage={10}\r\n            hover\r\n            cleaner\r\n            sorter\r\n            pagination\r\n            scopedSlots={{\r\n              salesStatus: (machine) => (\r\n                <td className=\"d-flex justify-content-between\">\r\n                  {machine.salesStatus}\r\n                  {user.userRole === \"sales\" && (\r\n                    <>\r\n                      {machine.salesStatus === \"unsold\" ? (\r\n                        <CLink\r\n                          className=\"text-primary\"\r\n                          onClick={() => {\r\n                            setDistributingMachineId(machine._id);\r\n                            setShowMachineDistributeModal(\r\n                              !showMachineDistributeModal\r\n                            );\r\n                          }}\r\n                        >\r\n                          <CTooltip\r\n                            content={`Distribut - ${machine.serialNumber}- machine.`}\r\n                          >\r\n                            <CIcon name=\"cil-control\" />\r\n                          </CTooltip>\r\n                        </CLink>\r\n                      ) : machine.salesStatus === \"returning\" ? (\r\n                        <CLink\r\n                          className=\"text-success\"\r\n                          onClick={() => {\r\n                            setDistributingMachineId(machine._id);\r\n                            revertMachine(machine._id);\r\n                          }}\r\n                        >\r\n                          <CTooltip\r\n                            content={`Revert - ${machine.serialNumber}- machine.`}\r\n                          >\r\n                            <CIcon name=\"cil-loop\" />\r\n                          </CTooltip>\r\n                        </CLink>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </td>\r\n              ),\r\n              Actions: (machine) => (\r\n                <td className=\"d-flex justify-content-between\">\r\n                  {user.userRole === \"branch-admin\" && (\r\n                    <>\r\n                      <CLink\r\n                        className=\"text-success\"\r\n                        onClick={() => {\r\n                          setMachine({ machine, ...machine });\r\n                          setActivemachine(machine._id);\r\n                          setShowModal(!showModal);\r\n                        }}\r\n                      >\r\n                        <CTooltip\r\n                          content={`Edit the  - ${machine.serialNumber}- machine detail.`}\r\n                        >\r\n                          <CIcon name=\"cil-pencil\" />\r\n                        </CTooltip>\r\n                      </CLink>\r\n                      {machine.salesStatus !== \"sold\" && (\r\n                        <>\r\n                          <span className=\"text-muted\">|</span>\r\n                          <CLink\r\n                            className=\"text-danger\"\r\n                            onClick={() => deletemachine(machine._id)}\r\n                          >\r\n                            <CTooltip\r\n                              content={`Delete - ${machine.serialNumber}- machine.`}\r\n                            >\r\n                              <CIcon name=\"cil-trash\" />\r\n                            </CTooltip>\r\n                          </CLink>\r\n                        </>\r\n                      )}\r\n                      <span className=\"text-muted\">|</span>\r\n                    </>\r\n                  )}\r\n\r\n                  {\r\n                    <>\r\n                      <CLink\r\n                        className=\"text-info\"\r\n                        onClick={() => {\r\n                          // setMachine({ machine, ...machine });\r\n                          // setActivemachine(machine._id);\r\n                          // setShowModal(!showModal);\r\n                        }}\r\n                      >\r\n                        <CTooltip\r\n                          content={`See detail of  - ${machine.serialNumber}- machine.`}\r\n                        >\r\n                          <CIcon name=\"cil-align-center\" />\r\n                        </CTooltip>\r\n                      </CLink>\r\n                    </>\r\n                  }\r\n                </td>\r\n              ),\r\n            }}\r\n          />\r\n        </CCardBody>\r\n\r\n        {/* register machine modal */}\r\n        <CModal\r\n          size=\"lg\"\r\n          show={showModal}\r\n          onClose={() => setShowModal(!showModal)}\r\n        >\r\n          <CModalHeader closeButton>\r\n            <CModalTitle className=\"text-muted\">Open-New-machine</CModalTitle>\r\n          </CModalHeader>\r\n          <CForm onSubmit={onSubmitRegisterMachine}>\r\n            <CModalBody>\r\n              <CRow>\r\n                <CCol xs=\"12\" md=\"6\">\r\n                  <CFormGroup>\r\n                    Serial Number\r\n                    <CInput\r\n                      id=\"serialNumber\"\r\n                      name=\"serialNumber\"\r\n                      placeholder=\"Enter serial number.\"\r\n                      value={machine.serialNumber}\r\n                      onChange={onChangeInput}\r\n                      required\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"12\" md=\"6\">\r\n                  <CFormGroup>\r\n                    Model\r\n                    <CInput\r\n                      id=\"machineModel\"\r\n                      name=\"machineModel\"\r\n                      placeholder=\"Enter machine model.\"\r\n                      value={machine.machineModel}\r\n                      onChange={onChangeInput}\r\n                      required\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n\r\n                <CCol xs=\"12\" md=\"4\">\r\n                  <CFormGroup>\r\n                    Brand\r\n                    <CInput\r\n                      id=\"brand\"\r\n                      name=\"brand\"\r\n                      placeholder=\"Enter brand.\"\r\n                      value={machine.brand}\r\n                      onChange={onChangeInput}\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"12\" md=\"4\">\r\n                  <CFormGroup>\r\n                    Price\r\n                    <CInput\r\n                      id=\"price\"\r\n                      name=\"price\"\r\n                      placeholder=\"Enter price.\"\r\n                      value={machine.price}\r\n                      onChange={onChangeInput}\r\n                      required\r\n                    />\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol xs=\"12\" md=\"4\">\r\n                  <CFormGroup>\r\n                    Machine status\r\n                    <CSelect\r\n                      aria-label=\"Default select example\"\r\n                      id=\"problemStatus\"\r\n                      name=\"problemStatus\"\r\n                      onChange={onChangeInput}\r\n                      value={machine.problemStatus}\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select machine status...</option>\r\n                      <option value=\"fine\">Fine</option>\r\n                      <option value=\"damaged\">Damaged</option>\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CRow>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              {activemachine === \"none\" ? (\r\n                <CButton type=\"submit\" size=\"sm\" color=\"dark\">\r\n                  <CIcon name=\"cil-save\" /> Register machine\r\n                </CButton>\r\n              ) : (\r\n                <CButton size=\"sm\" color=\"dark\" onClick={editmachineDetail}>\r\n                  <CIcon name=\"cil-pencil\" /> Save Changes\r\n                </CButton>\r\n              )}\r\n              <CButton\r\n                size=\"sm\"\r\n                color=\"danger\"\r\n                onClick={() => setShowModal(!showModal)}\r\n              >\r\n                <CIcon name=\"cil-x\" /> Close\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CForm>\r\n        </CModal>\r\n\r\n        {/* Distribute machine modal */}\r\n        <CModal\r\n          show={showMachineDistributeModal}\r\n          onClose={() => setShowModal(!showMachineDistributeModal)}\r\n        >\r\n          <CModalHeader closeButton>\r\n            <CModalTitle className=\"text-muted\">Distribute-machine</CModalTitle>\r\n          </CModalHeader>\r\n          <CForm onSubmit={distributeMachine}>\r\n            <CModalBody>\r\n              <CRow>\r\n                <CCol md=\"6\">\r\n                  <CFormGroup>\r\n                    Machine Id\r\n                    <CSelect\r\n                      aria-label=\"Default select example\"\r\n                      id=\"machineId\"\r\n                      name=\"machineId\"\r\n                      onChange={onChangeInput}\r\n                      required\r\n                    >\r\n                      <option value={distributingMachineId}>\r\n                        {distributingMachineId}\r\n                      </option>\r\n                    </CSelect>\r\n                  </CFormGroup>\r\n                </CCol>\r\n                <CCol md=\"6\">\r\n                  <CFormGroup>\r\n                    To wich business\r\n                    <CSelect\r\n                      aria-label=\"Default select example\"\r\n                      id=\"businessId\"\r\n                      name=\"businessId\"\r\n                      onChange={onChangeInput}\r\n                      value={machine.businessId}\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select business...</option>\r\n                      {businesses\r\n                        .filter(\r\n                          (bussiness) =>\r\n                            bussiness.machine === \"unassigned\" &&\r\n                            bussiness.credentials === \"Accepted\" &&\r\n                            bussiness.branch == user.branch\r\n                        )\r\n                        .map((filteredBussiness) => (\r\n                          <option\r\n                            value={filteredBussiness._id}\r\n                            key={filteredBussiness._id}\r\n                          >\r\n                            {filteredBussiness.businessName}\r\n                          </option>\r\n                        ))}\r\n                    </CSelect>\r\n                    <small className=\"text-muted\">\r\n                      If the business is not in the list it may be assigned a\r\n                      mchine or not registered yet!\r\n                    </small>\r\n                  </CFormGroup>\r\n                </CCol>\r\n              </CRow>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              <CButton type=\"submit\" size=\"sm\" color=\"dark\">\r\n                <CIcon name=\"cil-control\" /> Distribute\r\n              </CButton>\r\n              <CButton\r\n                size=\"sm\"\r\n                color=\"danger\"\r\n                onClick={() =>\r\n                  setShowMachineDistributeModal(!showMachineDistributeModal)\r\n                }\r\n              >\r\n                <CIcon name=\"cil-x\" /> Close\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CForm>\r\n        </CModal>\r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MachinesList;\r\n"],"sourceRoot":""}