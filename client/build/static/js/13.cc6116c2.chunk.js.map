{"version":3,"sources":["Components/Machine/MachineDistribute.js"],"names":["MachineDistribute","state","useContext","GlobalState","user","UserAPI","User","allMachines","MachineAPI","machines","allBusinesses","BusinessAPI","businesses","callback","setCallback","callbackBusiness","setCallbackBusiness","SalesAPI","callbackSales","setCallbackSales","distributingDetail","branch","machineId","businessId","useState","distributingMachine","setDistributingMachine","onChangeInput","e","target","name","value","sweetAlert","type","text","Swal","fire","position","background","icon","confirmButtonColor","showConfirmButton","distributeMachine","a","preventDefault","axios","post","res","data","msg","response","className","sm","md","lg","onSubmit","id","onChange","required","filter","machine","salesStatus","problemStatus","map","filteredMachine","_id","serialNumber","brand","bussiness","credentials","filteredBussiness","tradeName","size","color","onClick"],"mappings":"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","file":"static/js/13.cc6116c2.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { GlobalState } from \"../../GlobalState\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CLabel,\r\n  CForm,\r\n  CSelect,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst MachineDistribute = () => {\r\n  const state = useContext(GlobalState);\r\n  const [user] = state.UserAPI.User;\r\n  const [allMachines] = state.MachineAPI.machines;\r\n  const [allBusinesses] = state.BusinessAPI.businesses;\r\n  const [callback, setCallback] = state.MachineAPI.callback;\r\n  const [callbackBusiness, setCallbackBusiness] = state.BusinessAPI.callback;\r\n  const [callbackSales, setCallbackSales] = state.SalesAPI.callback;\r\n\r\n  const distributingDetail = {\r\n    branch: user.branch,\r\n    machineId: \"\",\r\n    businessId: \"\",\r\n  };\r\n  const [distributingMachine, setDistributingMachine] =\r\n    useState(distributingDetail);\r\n\r\n  const onChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    setDistributingMachine({ ...distributingMachine, [name]: value });\r\n  };\r\n  const sweetAlert = (type, text) => {\r\n    Swal.fire({\r\n      position: \"center\",\r\n      background: \"#EBEDEF\", // 2EB85C success // E55353 danger // 1E263C sidebar\r\n      icon: type,\r\n      text: text,\r\n      confirmButtonColor: \"#3C4B64\",\r\n      showConfirmButton: true,\r\n      // timer: 1500,\r\n    });\r\n  };\r\n  const distributeMachine = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await axios.post(\"/machine/distribute\", {\r\n        ...distributingMachine,\r\n      });\r\n      sweetAlert(\"success\", res.data.msg);\r\n      setCallback(!callback);\r\n      setCallbackBusiness(!callbackBusiness);\r\n      setCallbackSales(!callbackSales);\r\n    } catch (error) {\r\n      sweetAlert(\"error\", error.response.data.msg);\r\n    }\r\n  };\r\n  return (\r\n    <CRow className=\"d-flex justify-content-center\">\r\n      <CCard sm=\"12\" md=\"10\" lg=\"8\">\r\n        <CCardHeader></CCardHeader>\r\n        <CForm onSubmit={distributeMachine}>\r\n          <CCardBody>\r\n            <CRow>\r\n              <CCol md=\"6\">\r\n                <CFormGroup>\r\n                  <CLabel>Select Machine</CLabel>\r\n                  <CSelect\r\n                    aria-label=\"Default select example\"\r\n                    id=\"machineId\"\r\n                    name=\"machineId\"\r\n                    onChange={onChangeInput}\r\n                    value={distributingMachine.machineId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select machine identity...</option>\r\n                    {allMachines\r\n                      .filter(\r\n                        (machine) =>\r\n                          machine.salesStatus !== \"sold\" &&\r\n                          machine.branch == user.branch &&\r\n                          machine.problemStatus === \"fine\"\r\n                      )\r\n                      .map((filteredMachine) => (\r\n                        <option\r\n                          value={filteredMachine._id}\r\n                          key={filteredMachine._id}\r\n                        >\r\n                          SEN: {filteredMachine.serialNumber} {\"---\"}\r\n                          Brand: {filteredMachine.brand}\r\n                        </option>\r\n                      ))}\r\n                  </CSelect>\r\n                  <small className=\"text-muted\">\r\n                    If the machine is not in the above list it may be\r\n                    distributed or it's problem status is damaged!\r\n                  </small>\r\n                </CFormGroup>\r\n              </CCol>\r\n              <CCol md=\"6\">\r\n                <CFormGroup>\r\n                  <CLabel>Select business</CLabel>\r\n                  <CSelect\r\n                    aria-label=\"Default select example\"\r\n                    id=\"businessId\"\r\n                    name=\"businessId\"\r\n                    onChange={onChangeInput}\r\n                    value={distributingMachine.businessId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select business identity...</option>\r\n                    {allBusinesses\r\n                      .filter(\r\n                        (bussiness) =>\r\n                          bussiness.machine === \"unassigned\" &&\r\n                          bussiness.credentials === \"Accepted\" &&\r\n                          bussiness.branch == user.branch\r\n                      )\r\n                      .map((filteredBussiness) => (\r\n                        <option\r\n                          value={filteredBussiness._id}\r\n                          key={filteredBussiness._id}\r\n                        >\r\n                          {filteredBussiness.tradeName}\r\n                        </option>\r\n                      ))}\r\n                  </CSelect>\r\n                  <small className=\"text-muted\">\r\n                    If the business is not in the list above it may be assigned\r\n                    a mchine or you aren't accepted it yet!\r\n                  </small>\r\n                </CFormGroup>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardBody>\r\n          <CCardFooter>\r\n            <CRow className=\"d-flex justify-content-center\">\r\n              <CCol sm=\"12\" md=\"6\" lg=\"4\">\r\n                <CRow>\r\n                  <CCol>\r\n                    <CButton\r\n                      type=\"submit\"\r\n                      size=\"sm\"\r\n                      color=\"dark\"\r\n                      className=\"w-100\"\r\n                    >\r\n                      <CIcon name=\"cil-control\" /> Distribute\r\n                    </CButton>\r\n                  </CCol>\r\n\r\n                  <CCol>\r\n                    <CButton\r\n                      size=\"sm\"\r\n                      color=\"danger\"\r\n                      className=\"w-100\"\r\n                      onClick={() => setDistributingMachine(distributingDetail)}\r\n                    >\r\n                      <CIcon name=\"cil-x\" /> Clear\r\n                    </CButton>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardFooter>\r\n        </CForm>\r\n      </CCard>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default MachineDistribute;\r\n"],"sourceRoot":""}